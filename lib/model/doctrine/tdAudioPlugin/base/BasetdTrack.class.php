<?php

/**
 * BasetdTrack
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $td_track_album_id
 * @property string $file
 * @property string $title
 * @property clob $description
 * @property tinyint $position
 * @property string $type
 * @property integer $artist_id
 * @property integer $product_id
 * @property string $composer
 * @property string $lyricist
 * @property string $interpreter
 * @property string $producer
 * @property string $place_of_registration
 * @property string $photo_track
 * @property boolean $active
 * @property tdTrackAlbum $Album
 * 
 * @method integer      getTdTrackAlbumId()        Returns the current record's "td_track_album_id" value
 * @method string       getFile()                  Returns the current record's "file" value
 * @method string       getTitle()                 Returns the current record's "title" value
 * @method clob         getDescription()           Returns the current record's "description" value
 * @method tinyint      getPosition()              Returns the current record's "position" value
 * @method string       getType()                  Returns the current record's "type" value
 * @method integer      getArtistId()              Returns the current record's "artist_id" value
 * @method integer      getProductId()             Returns the current record's "product_id" value
 * @method string       getComposer()              Returns the current record's "composer" value
 * @method string       getLyricist()              Returns the current record's "lyricist" value
 * @method string       getInterpreter()           Returns the current record's "interpreter" value
 * @method string       getProducer()              Returns the current record's "producer" value
 * @method string       getPlaceOfRegistration()   Returns the current record's "place_of_registration" value
 * @method string       getPhotoTrack()            Returns the current record's "photo_track" value
 * @method boolean      getActive()                Returns the current record's "active" value
 * @method tdTrackAlbum getAlbum()                 Returns the current record's "Album" value
 * @method tdTrack      setTdTrackAlbumId()        Sets the current record's "td_track_album_id" value
 * @method tdTrack      setFile()                  Sets the current record's "file" value
 * @method tdTrack      setTitle()                 Sets the current record's "title" value
 * @method tdTrack      setDescription()           Sets the current record's "description" value
 * @method tdTrack      setPosition()              Sets the current record's "position" value
 * @method tdTrack      setType()                  Sets the current record's "type" value
 * @method tdTrack      setArtistId()              Sets the current record's "artist_id" value
 * @method tdTrack      setProductId()             Sets the current record's "product_id" value
 * @method tdTrack      setComposer()              Sets the current record's "composer" value
 * @method tdTrack      setLyricist()              Sets the current record's "lyricist" value
 * @method tdTrack      setInterpreter()           Sets the current record's "interpreter" value
 * @method tdTrack      setProducer()              Sets the current record's "producer" value
 * @method tdTrack      setPlaceOfRegistration()   Sets the current record's "place_of_registration" value
 * @method tdTrack      setPhotoTrack()            Sets the current record's "photo_track" value
 * @method tdTrack      setActive()                Sets the current record's "active" value
 * @method tdTrack      setAlbum()                 Sets the current record's "Album" value
 * 
 * @package    deevox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasetdTrack extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('td_track');
        $this->hasColumn('td_track_album_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('file', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('title', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 64,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('position', 'tinyint', null, array(
             'type' => 'tinyint',
             'notnull' => true,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('artist_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('composer', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('lyricist', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('interpreter', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('producer', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('place_of_registration', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('photo_track', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));


        $this->index('unique_album_track_position', array(
             'type' => 'unique',
             'fields' => 
             array(
              0 => 'td_track_album_id',
              1 => 'position',
             ),
             ));
        $this->option('charset', 'utf8');
        $this->option('collate', 'utf8_general_ci');

        $this->setSubClasses(array(
             'Track' => 
             array(
              'type' => 1,
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('tdTrackAlbum as Album', array(
             'local' => 'td_track_album_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}