<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Artist', 'doctrine');

/**
 * BaseArtist
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $sf_guard_user_id
 * @property integer $deevo_theme_id
 * @property string $artistName
 * @property string $hometown
 * @property string $nationality
 * @property string $website
 * @property string $facebook_address
 * @property string $twitter_address
 * @property string $date_of_early_career
 * @property string $number_of_album
 * @property string $number_of_title
 * @property clob $resume
 * @property clob $detail
 * @property date $creation_date_of_the_account
 * @property string $photo_biography
 * @property sfGuardUser $User
 * @property Doctrine_Collection $MusicalGenders
 * @property Doctrine_Collection $ArtistsMusicalGenders
 * @property Doctrine_Collection $MusicalInstruments
 * @property Doctrine_Collection $ArtistsMusicalInstruments
 * @property Doctrine_Collection $Albums
 * @property Doctrine_Collection $tracks
 * 
 * @method integer             getSfGuardUserId()                Returns the current record's "sf_guard_user_id" value
 * @method integer             getDeevoThemeId()                 Returns the current record's "deevo_theme_id" value
 * @method string              getArtistName()                   Returns the current record's "artistName" value
 * @method string              getHometown()                     Returns the current record's "hometown" value
 * @method string              getNationality()                  Returns the current record's "nationality" value
 * @method string              getWebsite()                      Returns the current record's "website" value
 * @method string              getFacebookAddress()              Returns the current record's "facebook_address" value
 * @method string              getTwitterAddress()               Returns the current record's "twitter_address" value
 * @method string              getDateOfEarlyCareer()            Returns the current record's "date_of_early_career" value
 * @method string              getNumberOfAlbum()                Returns the current record's "number_of_album" value
 * @method string              getNumberOfTitle()                Returns the current record's "number_of_title" value
 * @method clob                getResume()                       Returns the current record's "resume" value
 * @method clob                getDetail()                       Returns the current record's "detail" value
 * @method date                getCreationDateOfTheAccount()     Returns the current record's "creation_date_of_the_account" value
 * @method string              getPhotoBiography()               Returns the current record's "photo_biography" value
 * @method sfGuardUser         getUser()                         Returns the current record's "User" value
 * @method Doctrine_Collection getMusicalGenders()               Returns the current record's "MusicalGenders" collection
 * @method Doctrine_Collection getArtistsMusicalGenders()        Returns the current record's "ArtistsMusicalGenders" collection
 * @method Doctrine_Collection getMusicalInstruments()           Returns the current record's "MusicalInstruments" collection
 * @method Doctrine_Collection getArtistsMusicalInstruments()    Returns the current record's "ArtistsMusicalInstruments" collection
 * @method Doctrine_Collection getAlbums()                       Returns the current record's "Albums" collection
 * @method Doctrine_Collection getTracks()                       Returns the current record's "tracks" collection
 * @method Artist              setSfGuardUserId()                Sets the current record's "sf_guard_user_id" value
 * @method Artist              setDeevoThemeId()                 Sets the current record's "deevo_theme_id" value
 * @method Artist              setArtistName()                   Sets the current record's "artistName" value
 * @method Artist              setHometown()                     Sets the current record's "hometown" value
 * @method Artist              setNationality()                  Sets the current record's "nationality" value
 * @method Artist              setWebsite()                      Sets the current record's "website" value
 * @method Artist              setFacebookAddress()              Sets the current record's "facebook_address" value
 * @method Artist              setTwitterAddress()               Sets the current record's "twitter_address" value
 * @method Artist              setDateOfEarlyCareer()            Sets the current record's "date_of_early_career" value
 * @method Artist              setNumberOfAlbum()                Sets the current record's "number_of_album" value
 * @method Artist              setNumberOfTitle()                Sets the current record's "number_of_title" value
 * @method Artist              setResume()                       Sets the current record's "resume" value
 * @method Artist              setDetail()                       Sets the current record's "detail" value
 * @method Artist              setCreationDateOfTheAccount()     Sets the current record's "creation_date_of_the_account" value
 * @method Artist              setPhotoBiography()               Sets the current record's "photo_biography" value
 * @method Artist              setUser()                         Sets the current record's "User" value
 * @method Artist              setMusicalGenders()               Sets the current record's "MusicalGenders" collection
 * @method Artist              setArtistsMusicalGenders()        Sets the current record's "ArtistsMusicalGenders" collection
 * @method Artist              setMusicalInstruments()           Sets the current record's "MusicalInstruments" collection
 * @method Artist              setArtistsMusicalInstruments()    Sets the current record's "ArtistsMusicalInstruments" collection
 * @method Artist              setAlbums()                       Sets the current record's "Albums" collection
 * @method Artist              setTracks()                       Sets the current record's "tracks" collection
 * 
 * @package    deevox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArtist extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('artist');
        $this->hasColumn('sf_guard_user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('deevo_theme_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('artistName', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('hometown', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('nationality', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('website', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('facebook_address', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('twitter_address', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('date_of_early_career', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('number_of_album', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('number_of_title', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('resume', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('detail', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('creation_date_of_the_account', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('photo_biography', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'sf_guard_user_id',
             'foreign' => 'id'));

        $this->hasMany('MusicalGender as MusicalGenders', array(
             'refClass' => 'ArtistMusicalGender',
             'local' => 'artist_id',
             'foreign' => 'musical_gender_id'));

        $this->hasMany('ArtistMusicalGender as ArtistsMusicalGenders', array(
             'local' => 'id',
             'foreign' => 'artist_id'));

        $this->hasMany('MusicalInstrument as MusicalInstruments', array(
             'refClass' => 'ArtistMusicalInstrument',
             'local' => 'artist_id',
             'foreign' => 'musical_instrument_id'));

        $this->hasMany('ArtistMusicalInstrument as ArtistsMusicalInstruments', array(
             'local' => 'id',
             'foreign' => 'artist_id'));

        $this->hasMany('Album as Albums', array(
             'local' => 'id',
             'foreign' => 'artist_id'));

        $this->hasMany('Track as tracks', array(
             'local' => 'id',
             'foreign' => 'artist_id'));
    }
}