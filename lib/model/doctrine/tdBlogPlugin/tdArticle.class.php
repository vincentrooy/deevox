<?php

/**
 * tdArticle
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    deevox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class tdArticle extends PlugintdArticle
{
	public function _toString()
	{
		return $this->getTitle();
	}
	
	/**
	 * return the absolute path of the ProfilePhoto
	 */
	public function getArticleFileSrc()
	{
		if (!$this->getImage()) {
			return null;
		}
 
		return $this->getArticleDirSrc().'/'.$this->getImage();
	}
 
	/**
	 *Returns the relative path of the thumbnails
	 */
	public function getArticleFileSrcMini()
	{
		if (!$this->getImage()) {
			return null;
		}
 
		return $this->getArticleDirSrc().'/mini_image_blog/'.$this->getImage();
	}
 
	/**
	 * Returns the absolute path of the ProfilePhoto
	 */
	public function getArticleFilePath()
	{
		if (!$this->getImage()) {
			return null;
		}
 
		return $this->getArticleDirPath().'/'.$this->getImage();
	}
 
	/**
	 * Returns the absolute path of the thumbnails
	 */
	public function getArticleFileMini()
	{
		if (!$this->getImage()) {
			return null;
		}
 
		return $this->getArticleDirMini().'/'.$this->getImage();
	}
 
	/**
	 * Returns the path of the file relating
	 */
	public function getArticleDirSrc()
	{
		return '/uploads/td/blog/';
	}
 
	/**
	 * Returns the absolute path to the folder
	 */
	public function getArticleDirPath()
	{
		return sfConfig::get('sf_upload_dir').'/td/blog/';
	}
 
	/**
	 * Returns the absolute path to the folder thumbnail
	 */
	public function getArticleDirMini()
	{
		return $this->getArticleDirPath().'../mini_image_blog/';
	}
	
	
	/**
	* Performed before the backup
	*/
	public function preSave($event)
	{
	 
		// $event->getInvoker permet de récupérer le dernier enregistrement (Doctrine_Record)
		// getModified(true) permet de récupérer les anciennes valeurs
		 
		$modified = $event->getInvoker()->getModified( true );
		 
		// look if the ProfilePhoto field was changed
		 
		if (isset($modified['image']))
		{
			$old_path = $this->getArticleDirPath() . '/' . $modified['image'];
			$old_mini = $this->getArticleDirMini().'/'. $modified['image'];
		 
			 // If the file exists, we delete it
			if (file_exists($old_path))
			{
				@unlink($old_path);
		 
			}
		 
			// same for miniature
			if (file_exists($old_mini))
			{
				@unlink($old_mini);
			}
		 }
	}
	 
	// public function preDelete($event)
	// {
		//master predelete processing...
	// }
	
	
	public function postDelete($event)
	{
	  // We remove the ProfilePhoto if the file exists and miniature
	  if (file_exists($event->getInvoker()->getArticleFilePath()))
	  {
		@unlink($event->getInvoker()->getArticleFilePath());
		@unlink($event->getInvoker()->getArticleFileMini());
	  }
	}
	
	public function updateObject($values = null)
	{
		$object = parent::updateObject($values);
	 
		if($photos = $object->getPhoto()){
			// creation of the thumbnail
			$thumbnail = new sfThumbnail(150, 150);
			$thumbnail->loadFile($object->getArticleFilePath());
			$thumbnail->save($object->getArticleFileMini(), 'image/png');
	 
			return $object;
		}
	 
	}
}