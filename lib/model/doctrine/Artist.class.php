<?php

/**
 * Artist
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    deevox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Artist extends BaseArtist
{
	/**
	 * return the absolute path of the ProfilePhoto
	 */
	public function getArtistFileSrc()
	{
		if (!$this->getPhotoBiography()) {
			return null;
		}
 
		return $this->getArtistDirSrc().'/'.$this->getPhotoBiography();
	}
 
	/**
	 *Returns the relative path of the thumbnails
	 */
	public function getArtistFileSrcMini()
	{
		if (!$this->getPhotoBiography()) {
			return null;
		}
 
		return $this->getArtistDirSrc().'/mini_artiste/'.$this->getPhotoBiography();
	}
 
	/**
	 * Returns the absolute path of the ProfilePhoto
	 */
	public function getArtistFilePath()
	{
		if (!$this->getPhotoBiography()) {
			return null;
		}
 
		return $this->getArtistDirPath().'/'.$this->getPhotoBiography();
	}
 
	/**
	 * Returns the absolute path of the thumbnails
	 */
	public function getArtistFileMini()
	{
		if (!$this->getPhotoBiography()) {
			return null;
		}
 
		return $this->getArtistDirMini().'/'.$this->getPhotoBiography();
	}
 
	/**
	 * Returns the path of the file relating
	 */
	public function getArtistDirSrc()
	{
		return '/uploads/photos/artistes';
	}
 
	/**
	 * Returns the absolute path to the folder
	 */
	public function getArtistDirPath()
	{
		return sfConfig::get('sf_upload_dir').'/photos/artistes';
	}
 
	/**
	 * Returns the absolute path to the folder thumbnail
	 */
	public function getArtistDirMini()
	{
		return $this->getArtistDirPath().'/mini_artiste';
	}
	
	
	/**
	* Performed before the backup
	*/
	public function preSave($event)
	{
	 
		// $event->getInvoker permet de récupérer le dernier enregistrement (Doctrine_Record)
		// getModified(true) permet de récupérer les anciennes valeurs
		 
		$modified = $event->getInvoker()->getModified( true );
		 
		// look if the ProfilePhoto field was changed
		 
		if (isset($modified['photo_biography']))
		{
			$old_path = $this->getArtistDirPath() . '/' . $modified['photo_biography'];
			$old_mini = $this->getArtistDirMini().'/'. $modified['photo_biography'];
		 
			 // If the file exists, we delete it
			if (file_exists($old_path))
			{
				@unlink($old_path);
		 
			}
		 
			// same for miniature
			if (file_exists($old_mini))
			{
				@unlink($old_mini);
			}
		 }
	}
	 
	// public function preDelete($event)
	// {
		//master predelete processing...
	// }
	
	
	public function postDelete($event)
	{
	  // We remove the ProfilePhoto if the file exists and miniature
	  if (file_exists($event->getInvoker()->getArtistFilePath()))
	  {
		@unlink($event->getInvoker()->getArtistFilePath());
		@unlink($event->getInvoker()->getArtistFileMini());
	  }
	}
	
	public function updateObject($values = null)
	{
		$object = parent::updateObject($values);
	 
		if($photos = $object->getPhoto()){
			// creation of the thumbnail
			$thumbnail = new sfThumbnail(150, 150);
			$thumbnail->loadFile($object->getArtistFilePath());
			$thumbnail->save($object->getArtistFileMini(), 'image/png');
	 
			return $object;
		}
	 
	}
	
	
	public function _toString()
	{
		return $this->getArtistName();
	}
	
	public static function getArtistByDeevonaute($id_deevonaute)
	{
		$q = Doctrine_Query::create()
				->from('Artist a')
				->where('a.sf_guard_user_id = ?', $id_deevonaute);
				
		return Doctrine_Core::getTable('Artist')->retrieveArtist($q);
	}
}