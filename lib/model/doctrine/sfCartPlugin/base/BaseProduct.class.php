<?php

/**
 * BaseProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $code
 * @property string $description
 * @property double $weight
 * @property string $photo_path
 * @property integer $quantity
 * @property double $price
 * @property double $saleprice
 * @property boolean $active
 * @property Doctrine_Collection $Categories
 * @property Doctrine_Collection $ProductCategory
 * @property DeevoTheme $DeevoTheme
 * @property Album $Album
 * @property Track $Track
 * 
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getCode()            Returns the current record's "code" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method double              getWeight()          Returns the current record's "weight" value
 * @method string              getPhotoPath()       Returns the current record's "photo_path" value
 * @method integer             getQuantity()        Returns the current record's "quantity" value
 * @method double              getPrice()           Returns the current record's "price" value
 * @method double              getSaleprice()       Returns the current record's "saleprice" value
 * @method boolean             getActive()          Returns the current record's "active" value
 * @method Doctrine_Collection getCategories()      Returns the current record's "Categories" collection
 * @method Doctrine_Collection getProductCategory() Returns the current record's "ProductCategory" collection
 * @method DeevoTheme          getDeevoTheme()      Returns the current record's "DeevoTheme" value
 * @method Album               getAlbum()           Returns the current record's "Album" value
 * @method Track               getTrack()           Returns the current record's "Track" value
 * @method Product             setName()            Sets the current record's "name" value
 * @method Product             setCode()            Sets the current record's "code" value
 * @method Product             setDescription()     Sets the current record's "description" value
 * @method Product             setWeight()          Sets the current record's "weight" value
 * @method Product             setPhotoPath()       Sets the current record's "photo_path" value
 * @method Product             setQuantity()        Sets the current record's "quantity" value
 * @method Product             setPrice()           Sets the current record's "price" value
 * @method Product             setSaleprice()       Sets the current record's "saleprice" value
 * @method Product             setActive()          Sets the current record's "active" value
 * @method Product             setCategories()      Sets the current record's "Categories" collection
 * @method Product             setProductCategory() Sets the current record's "ProductCategory" collection
 * @method Product             setDeevoTheme()      Sets the current record's "DeevoTheme" value
 * @method Product             setAlbum()           Sets the current record's "Album" value
 * @method Product             setTrack()           Sets the current record's "Track" value
 * 
 * @package    deevox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sfCartProduct');
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('code', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('description', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('weight', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('photo_path', 'string', 400, array(
             'type' => 'string',
             'length' => 400,
             ));
        $this->hasColumn('quantity', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('price', 'double', null, array(
             'type' => 'double',
             'notnull' => true,
             ));
        $this->hasColumn('saleprice', 'double', null, array(
             'type' => 'double',
             'notnull' => false,
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Category as Categories', array(
             'refClass' => 'ProductCategory',
             'local' => 'product_id',
             'foreign' => 'category_id'));

        $this->hasMany('ProductCategory', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasOne('DeevoTheme', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasOne('Album', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $this->hasOne('Track', array(
             'local' => 'id',
             'foreign' => 'product_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             ));
        $searchable0 = new Doctrine_Template_Searchable(array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'code',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
        $this->actAs($searchable0);
    }
}